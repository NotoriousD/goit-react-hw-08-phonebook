{"version":3,"sources":["Components/ContactForm/contactform.module.css","Components/ContactList/contactlist.module.css","Components/Filter/filter.module.css","Pages/ContactPage/contactpage.module.css","Transiction/pop.module.css","Redux/contacts/contacts-operations.js","Redux/contacts/contacts-selectors.js","Components/ContactForm/ContactForm.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","Pages/ContactPage/ContactPage.jsx"],"names":["module","exports","addContact","name","number","dispatch","contactsActions","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getFilter","state","contacts","filter","getContacts","items","getLoading","loading","showContacts","createSelector","lowerCaseFilter","toLowerCase","includes","ContactForm","isExist","duplicateContact","handleInput","e","setState","currentTarget","value","handleSubmit","preventDefault","props","map","contact","setTimeout","onAddContact","this","className","styles","headWrapper","CSSTransition","in","appear","timeout","classNames","title","unmountOnExit","border","form","onSubmit","input","type","onChange","mask","pattern","placeholder","button","disabled","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","ContactList","handleDeleteContact","TransitionGroup","component","list","item","key","wrapper","container","telName","telNumber","Button","onClick","variant","onChangeFilter","filterByNames","target","ContactsView","isLoading","style","Loader","length","pop"],"mappings":"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","file":"static/js/3.54a9f00d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"contactform_border__3hdmC\",\"title\":\"contactform_title__237Tk\",\"headWrapper\":\"contactform_headWrapper__dZIpO\",\"error\":\"contactform_error__3Yq-j\",\"appear\":\"contactform_appear__hFV5T\",\"appearActive\":\"contactform_appearActive__2Iw-I\",\"enter\":\"contactform_enter__3BlN3\",\"enterActive\":\"contactform_enterActive__31XNw\",\"exit\":\"contactform_exit__3fG2z\",\"exitActive\":\"contactform_exitActive__2636F\",\"form\":\"contactform_form__1NOWd\",\"button\":\"contactform_button__bBapZ\",\"input\":\"contactform_input__4tWjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactlist_list__3iv4U\",\"wrapper\":\"contactlist_wrapper__2PWZW\",\"container\":\"contactlist_container__1n7IH\",\"buttonWrapper\":\"contactlist_buttonWrapper__UQAgA\",\"closeBtn\":\"contactlist_closeBtn__1Dd8a\",\"telNumber\":\"contactlist_telNumber__eCtiD\",\"enter\":\"contactlist_enter__22PI_\",\"enterActive\":\"contactlist_enterActive__1mqVQ\",\"exit\":\"contactlist_exit__2B609\",\"exitActive\":\"contactlist_exitActive__mQFRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"filter_container__1aPV5\",\"wrapper\":\"filter_wrapper__24Nfw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"contactpage_container__2P3ir\",\"wrapper\":\"contactpage_wrapper__3eajR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1W3Nl\",\"enterActive\":\"pop_enterActive__K-9xn\",\"exit\":\"pop_exit__26NG-\",\"exitActive\":\"pop_exitActive__3qvIC\"};","import axios from \"axios\";\nimport contactsActions from \"./contacts-actions\";\n\nconst addContact = (name, number) => (dispatch) => {\n  dispatch(contactsActions.addContactRequest());\n\n  axios\n    .post(\"/contacts\", { name, number })\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\n};\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  axios\n    .get(\"/contacts\")\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\n    .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\n};\n\nconst deleteContact = (id) => (dispatch) => {\n  dispatch(contactsActions.deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\n    .catch((error) => dispatch(contactsActions.deleteContactError(error)));\n};\n\nexport default { addContact, fetchContacts, deleteContact };\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getLoading = (state) => state.contacts.loading;\n\nconst getFilter = (state) => state.contacts.filter;\n\nconst getContacts = (state) => state.contacts.items;\n\nconst showContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const lowerCaseFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(lowerCaseFilter)\n    );\n  }\n);\n\nexport default {\n  getContacts,\n  getLoading,\n  getFilter,\n  showContacts,\n};\n","import React, { Component } from \"react\";\nimport styles from \"./contactform.module.css\";\nimport { contactsOperations, contactsSelectors } from \"../../Redux/contacts\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport InputMask from \"react-input-mask\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    isExist: false,\n    duplicateContact: \"\",\n  };\n\n  handleInput = (e) =>\n    this.setState({\n      [e.currentTarget.name]: e.currentTarget.value,\n    });\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n\n    const avaibleNames = contacts.map((contact) => contact.name.toLowerCase());\n\n    if (avaibleNames.includes(name.toLowerCase())) {\n      this.setState({ isExist: true, duplicateContact: name });\n      setTimeout(\n        () => this.setState({ isExist: false, duplicateContact: \"\" }),\n        2000\n      );\n    } else {\n      this.props.onAddContact(name, number);\n      this.setState({\n        name: \"\",\n        number: \"\",\n        isExist: false,\n        duplicateContact: \"\",\n      });\n    }\n  };\n\n  render() {\n    const { name, number, isExist, duplicateContact } = this.state;\n    return (\n      <div>\n        <div className={styles.headWrapper}>\n          <CSSTransition\n            in={true}\n            appear={true}\n            timeout={500}\n            classNames={styles}\n          >\n            <h1 className={styles.title}>Phonebook</h1>\n          </CSSTransition>\n\n          <CSSTransition\n            in={isExist}\n            timeout={250}\n            classNames={styles}\n            unmountOnExit\n          >\n            <div className={styles.error}>\n              {duplicateContact} already exist!\n            </div>\n          </CSSTransition>\n        </div>\n\n        <div className={styles.border}>\n          <form className={styles.form} onSubmit={this.handleSubmit}>\n            <h3>Name</h3>\n            <input\n              className={styles.input}\n              name=\"name\"\n              type=\"text\"\n              onChange={this.handleInput}\n              value={name}\n            ></input>\n            <h3>Number</h3>\n\n            <InputMask\n              mask=\"999-99-99\"\n              name=\"number\"\n              className={styles.input}\n              pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n              placeholder=\"000-00-00\"\n              type=\"tel\"\n              onChange={this.handleInput}\n              value={number}\n            />\n\n            <br />\n            <button\n              className={styles.button}\n              type=\"submit\"\n              disabled={!this.state.name || !this.state.number}\n            >\n              Add contact\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = {\n  onAddContact: contactsOperations.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from \"react\";\nimport styles from \"./contactlist.module.css\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport { contactsOperations, contactsSelectors } from \"../../Redux/contacts\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nclass ContactList extends Component {\n  handleDeleteContact = (id) => () => {\n    const { deleteContact } = this.props;\n\n    deleteContact(id);\n  };\n\n  render() {\n    const { contacts } = this.props;\n    return (\n      <TransitionGroup component=\"ul\" className={styles.list}>\n        {contacts.map((item) => (\n          <CSSTransition key={item.id} timeout={250} classNames={styles}>\n            <li>\n              <div className={styles.wrapper}>\n                <div className={styles.container}>\n                  <span className={styles.telName}>{item.name}</span>\n                  <span className={styles.telNumber}>{item.number}</span>\n\n                  <Button\n                    id={item.id}\n                    onClick={this.handleDeleteContact(item.id)}\n                    variant=\"danger\"\n                  >\n                    &times;\n                  </Button>\n                </div>\n              </div>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    );\n  }\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return { contacts: contactsSelectors.showContacts(state) };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./filter.module.css\";\nimport { connect } from \"react-redux\";\nimport { contactsActions, contactsSelectors } from \"../../Redux/contacts\";\n\nconst Filter = ({ onChangeFilter, value }) => (\n  <div className={styles.container}>\n    <div className={styles.wrapper}>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        onChange={(e) => onChangeFilter(e.target.value)}\n        value={value}\n        name=\"filter\"\n      />\n    </div>\n  </div>\n);\n\nFilter.propTypes = {\n  onChangeFilter: PropTypes.func,\n  value: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = {\n  onChangeFilter: contactsActions.filterByNames,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../Components/Loader\";\nimport ContactForm from \"../../Components/ContactForm\";\nimport ContactList from \"../../Components/ContactList\";\nimport Filter from \"../../Components/Filter\";\nimport style from \"./contactpage.module.css\";\nimport pop from \"../../Transiction/pop.module.css\";\nimport { contactsSelectors, contactsOperations } from \"../../Redux/contacts\";\nimport { CSSTransition } from \"react-transition-group\";\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { isLoading, contacts } = this.props;\n    return (\n      <div className={style.wrapper}>\n        <div className={style.container}>\n          {isLoading && <Loader />}\n\n          <ContactForm />\n\n          <CSSTransition\n            in={contacts.length > 1}\n            timeout={500}\n            classNames={pop}\n            unmountOnExit\n          >\n            <Filter />\n          </CSSTransition>\n          <ContactList />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContacts(state),\n  isLoading: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  fetchContacts: contactsOperations.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}